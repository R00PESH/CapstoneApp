package training.iqgateway.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.geo.Distance;
import org.springframework.data.geo.Metrics;
import org.springframework.data.geo.Point;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.geo.GeoJsonPoint;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;


import training.iqgateway.model.ProviderEO;
import training.iqgateway.model.ProviderEO.Review;
import training.iqgateway.repo.ProviderRepository;
import training.iqgateway.service.ProviderService;

public class ProviderServiceImpl implements ProviderService {
	
	@Autowired
	private ProviderRepository provideRepo;
	
	@Autowired
	private MongoTemplate mongoTem;

	@Override
	public ProviderEO createProvider(ProviderEO provider) {
		if(provider.getLat()!=0 && provider.getLon()!=0) {
			provider.setGeoLocation(new GeoJsonPoint(provider.getLon(),provider.getLat()));
		}
		provider.setRating(0d);
		return provideRepo.save(provider);
	}

	@Override
	public ProviderEO getProviderById(String docId) {
		// TODO Auto-generated method stub
		return provideRepo.findById(docId).orElse(null);
	}

	@Override
	public List<ProviderEO> getProviderByName(String name) {
		// TODO Auto-generated method stub
		return provideRepo.findByName(name);
	}

	@Override
	public List<ProviderEO> getAllProviders() {
		// TODO Auto-generated method stub
		return provideRepo.findAll();
	}

	@Override
	public ProviderEO updateProvider(String docId, ProviderEO provider) {
		 ProviderEO existing = getProviderById(docId);
	        if (existing == null) return null;
	        provider.setId(docId);
	        if (provider.getLat() != 0 && provider.getLon() != 0) {
	            provider.setGeoLocation(new org.springframework.data.mongodb.core.geo.GeoJsonPoint(provider.getLon(), provider.getLat()));
	        }
	        if (provider.getReviews() != null && !provider.getReviews().isEmpty()) {
	            provider.setRating(calcReviewAverage(provider.getReviews()));
	        }
	        return provideRepo.save(provider);
	    }
	@Override
	public void deleteProvider(String docId) {
		provideRepo.deleteById(docId);
	}

	@Override
	public List<ProviderEO> filterProviders(Double lat, Double lon, Double distanceKm, Double minExperience,
			Double minRating, String gender, List<String> insurancePlans, String speciality) {
		List<Criteria> criteriaList = new ArrayList<Criteria>();
        if (lat != null && lon != null && distanceKm != null) {
            Point point = new Point(lon, lat);
            Distance distance = new Distance(distanceKm, Metrics.KILOMETERS);
            criteriaList.add(Criteria.where("geoLocation").nearSphere(point).maxDistance(distance.getNormalizedValue()));
        }
        if (minExperience != null) criteriaList.add(Criteria.where("experience").gte(minExperience));
        if (minRating != null) criteriaList.add(Criteria.where("rating").gte(minRating));
        if (gender != null) criteriaList.add(Criteria.where("gender").is(gender));
        if (insurancePlans != null && !insurancePlans.isEmpty())
            criteriaList.add(Criteria.where("insurancePlans").in(insurancePlans));
        if (speciality != null) criteriaList.add(Criteria.where("speciality").is(speciality));
        Query query = new Query();
        if (!criteriaList.isEmpty()) query.addCriteria(new Criteria().andOperator(criteriaList));
        return mongoTem.find(query, ProviderEO.class);
    }

	

	@Override
	public ProviderEO addReview(String providerId, Review review) {
		ProviderEO provider = getProviderById(providerId);
        if (provider == null) return null;
        if (provider.getReviews() == null) provider.setReviews(new ArrayList<>());
        provider.getReviews().add(review);
        provider.setRating(calcReviewAverage(provider.getReviews()));
        return provideRepo.save(provider);
    }
	
	private double calcReviewAverage(List<ProviderEO.Review> reviews) {
        if (reviews == null || reviews.isEmpty()) return 0d;
        double sum = 0;
        for (ProviderEO.Review r : reviews) sum += r.getRating();
        return Math.round((sum / reviews.size()) * 10.0) / 10.0;
    }

}
