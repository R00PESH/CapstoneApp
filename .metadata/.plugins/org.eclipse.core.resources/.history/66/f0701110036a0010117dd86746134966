package training.iqgateway.service.impl;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import training.iqgateway.dto.DoctorDTO;

@Service
public class DoctorClientService {
	
	
	@Value("${doctor.service.url}")
	private String doctorServiceUrl;
	
	@Autowired
	private RestTemplate restTemplate;
	
	

//    public List<DoctorDTO> filterDoctors(
//        String docId, String hosId, String specialization, String availabilityStatus,
//        String licenseNumber, String qualification, String name, Double yearsOfExperience, Double rating
//    ) {
//        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(doctorServiceUrl + "/filter");
//        if (docId != null) builder.queryParam("doc_Id", docId);
//        if (hosId != null) builder.queryParam("hosId", hosId);
//        if (specialization != null) builder.queryParam("specialization", specialization);
//        if (availabilityStatus != null) builder.queryParam("availabilityStatus", availabilityStatus);
//        if (licenseNumber != null) builder.queryParam("licenseNumber", licenseNumber);
//        if (qualification != null) builder.queryParam("qualification", qualification);
//        if (name != null) builder.queryParam("name", name);
//        if (yearsOfExperience != null) builder.queryParam("yearsOfExperience", yearsOfExperience);
//        if (rating != null) builder.queryParam("rating", rating);
//
//        DoctorDTO[] response = restTemplate.getForObject(builder.toUriString(), DoctorDTO[].class);
//        return Arrays.asList(response);
//    }
//}
	
	public List<DoctorDTO> filterDoctors(
		    String docId, String hosId, String specialization, String availabilityStatus,
		    String licenseNumber, String qualification, String name, Double yearsOfExperience, Double rating
		) {
		    UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(doctorServiceUrl + "/filter");
		    if (docId != null) builder.queryParam("doc_Id", docId);
		    if (hosId != null) builder.queryParam("hosId", hosId);

		    // Safely decode user/client-encoded specialization (e.g., from a previous "General%20Medicine")
		    if (specialization != null) {
		        // Defensive decode: guarantees single encoding to downstream
		        try {
		            specialization = java.net.URLDecoder.decode(specialization, java.nio.charset.StandardCharsets.UTF_8);
		        } catch (Exception ignore) {}
		        builder.queryParam("specialization", specialization);
		    }
		    
		    if (availabilityStatus != null) {
		        // Defensive decode
		        try {
		            availabilityStatus = java.net.URLDecoder.decode(availabilityStatus, java.nio.charset.StandardCharsets.UTF_8);
		        } catch (Exception ignore) {}
		        builder.queryParam("availabilityStatus", availabilityStatus);
		    }



		    if (availabilityStatus != null) builder.queryParam("availabilityStatus", availabilityStatus);
		    if (licenseNumber != null) builder.queryParam("licenseNumber", licenseNumber);
		    if (qualification != null) builder.queryParam("qualification", qualification);
		    if (name != null) builder.queryParam("name", name);
		    if (yearsOfExperience != null) builder.queryParam("yearsOfExperience", yearsOfExperience);
		    if (rating != null) builder.queryParam("rating", rating);
		    
		    System.out.println("GATEWAY TO DOCTOR-MS: specialization param about to be passed = {" + specialization + "}");


		    DoctorDTO[] response = restTemplate.getForObject(builder.toUriString(), DoctorDTO[].class);
		    return response == null ? List.of() : Arrays.asList(response);
		}

}


