package training.iqgateway.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import training.iqgateway.dto.DoctorDTO;
import training.iqgateway.dto.ProviderDTO;
import training.iqgateway.mapper.ProviderMapper;
import training.iqgateway.model.ProviderEO;
import training.iqgateway.service.ProviderService;
import training.iqgateway.service.impl.DoctorServiceUrl;


@RestController
@RequestMapping("/providers")
public class ProviderController {
	
	@Autowired(required = true)
	private ProviderService provideSer;
	
	@Autowired 
	private DoctorServiceUrl doctorServiceUrl;

	@Autowired
	public ProviderController(DoctorServiceUrl doctorServiceUrl) {
		this.doctorServiceUrl = doctorServiceUrl;
	}
	
	@PostMapping
    public ProviderDTO createProvider(@RequestBody ProviderDTO providerDTO) {
        ProviderEO entity = ProviderMapper.toEntity(providerDTO);
        ProviderEO created = provideSer.createProvider(entity);
        return ProviderMapper.toDTO(created);
    }
	
	@GetMapping("/{id}")
    public ProviderDTO getProvider(@PathVariable String id) {
        return ProviderMapper.toDTO(provideSer.getProviderById(id));
    }

    @GetMapping
    public List<ProviderDTO> getAllProviders() {
        return provideSer.getAllProviders().stream()
            .map(ProviderMapper::toDTO)
            .collect(Collectors.toList());
    }
    
    @PutMapping("/{id}")
    public ProviderDTO updateProvider(@PathVariable String id, @RequestBody ProviderDTO providerDTO) {
        ProviderEO entity = ProviderMapper.toEntity(providerDTO);
        ProviderEO updated = provideSer.updateProvider(id, entity);
        return ProviderMapper.toDTO(updated);
    }

    @DeleteMapping("/{id}")
    public void deleteProvider(@PathVariable String id) {
        provideSer.deleteProvider(id);
    }
    
    @GetMapping("/filter")
    public List<ProviderDTO> filterProviders(
            @RequestParam(required = false) Double lat,
            @RequestParam(required = false) Double lon,
            @RequestParam(required = false) Double distanceKm,
            @RequestParam(required = false) Long zipcode,
            @RequestParam(required = false) Double minRating,
            @RequestParam(required = false) List<String> insurancePlans,
            @RequestParam(required = false,name="Hospital_Name") String Hospital_name,
            @RequestParam(required = false,name="location") String Location,
            @RequestParam(required = false,name="speciality") String speciality
    ) {
        return provideSer.filterProviders(
                lat, lon, distanceKm, zipcode,minRating,insurancePlans, Hospital_name, Location,speciality
        ).stream().map(ProviderMapper::toDTO).collect(Collectors.toList());
    }
    
    @GetMapping("/{id}/doctors")
    public List<DoctorDTO> getProviderDoctors(@PathVariable String id) {
        ProviderDTO providerDTO = ProviderMapper.toDTO(provideSer.getProviderById(id));
        if (providerDTO == null || providerDTO.getDocId() == null) {
            return List.of(); // No provider or no doctors assigned yet
        }
        // Classic for-loop:
        List<DoctorDTO> doctors = new ArrayList<>();
        for(String docId : providerDTO.getDocId()) {
            DoctorDTO doctor = doctorServiceUrl.fetchDoctorByDocId(docId);
            if (doctor != null) doctors.add(doctor);
        }
        return doctors;

        // -- or, using stream:
        // return providerDTO.getDocIds().stream()
        //     .map(doctorServiceUrl::fetchDoctorByDocId)
        //     .filter(Objects::nonNull)
        //     .collect(Collectors.toList());
    }


    @PostMapping("/{id}/reviews")
    public ProviderDTO addReview(
            @PathVariable String id,
            @RequestBody ProviderDTO.ReviewDTO reviewDTO) {
        ProviderEO.Review review = ProviderMapper.toReviewEntity(reviewDTO);
        ProviderEO updated = provideSer.addReview(id, review);
        return ProviderMapper.toDTO(updated);
    }

}
