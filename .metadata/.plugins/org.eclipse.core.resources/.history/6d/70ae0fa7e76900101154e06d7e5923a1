package training.iqgateway.service.impl;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import training.iqgateway.dto.DoctorDTO;

@Service
public class DoctorClientService {
	
	
	@Value("${doctor.service.url}")
	private String doctorServiceUrl;
	
	@Autowired
	private RestTemplate restTemplate;
	
	

    public List<DoctorDTO> filterDoctors(
        String docId, Integer hosId, String specialization, String availabilityStatus,
        String licenseNumber, String qualification, String name, Double yearsOfExperience, Double rating
    ) {
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(doctorServiceUrl + "/filter");
        if (docId != null) builder.queryParam("docId", docId);
        if (hosId != null) builder.queryParam("hosId", hosId);
        if (specialization != null) builder.queryParam("specialization", specialization);
        if (availabilityStatus != null) builder.queryParam("availabilityStatus", availabilityStatus);
        if (licenseNumber != null) builder.queryParam("licenseNumber", licenseNumber);
        if (qualification != null) builder.queryParam("qualification", qualification);
        if (name != null) builder.queryParam("name", name);
        if (yearsOfExperience != null) builder.queryParam("yearsOfExperience", yearsOfExperience);
        if (rating != null) builder.queryParam("rating", rating);

        DoctorDTO[] response = restTemplate.getForObject(builder.toUriString(), DoctorDTO[].class);
        return Arrays.asList(response);
    }
}


